# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: felipeserverless
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: back-prod-sup
# "service" is the name of this project. This will also be added to your AWS resource names.
service: back-prod-sup

stages:
  prod:
    observability: true # turn on observability in the "prod" Stage.
  dev:
    observability: true # turn on observability in the "dev" Stage.
  default:
    observability: false # turn off observability for all other Stages.

provider:
  name: aws
  runtime: provided.al2
  architecture: arm64
  stage: dev
  region: sa-east-1
  versionFunctions: false
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/suppliers"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/films"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/categories"

package:
  individually:
    true
    # patterns:
    #   - "!./**"
    #   - ./bin/**

functions:
  create-supplier:
    handler: bootstrap
    package:
      artifact: bin/CreateSupplier.zip
    events:
      - httpApi:
          path: /supplier
          method: post

  list-supplier:
    handler: bootstrap
    package:
      artifact: bin/ListSuppliers.zip
    events:
      - httpApi:
          path: /supplier
          method: get

  ## ---------- Films ----------
  create-film:
    handler: bootstrap
    package:
      artifact: bin/CreateFilm.zip
    events:
      - httpApi:
          path: /film
          method: post

  list-films:
    handler: bootstrap
    package:
      artifact: bin/ListFilms.zip
    events:
      - httpApi:
          path: /film
          method: get

  get-one-film:
    handler: bootstrap
    package:
      artifact: bin/GetOneFilm.zip
    events:
      - httpApi:
          path: /film/{id}
          method: get

  update-film:
    handler: bootstrap
    package:
      artifact: bin/UpdateFilm.zip
    events:
      - httpApi:
          path: /film/{id}
          method: put

  delete-film:
    handler: bootstrap
    package:
      artifact: bin/DeleteFilm.zip
    events:
      - httpApi:
          path: /film/{id}
          method: delete

  ## ---------- Categories ----------

  create-category:
    handler: bootstrap
    package:
      artifact: bin/CreateCategory.zip
    events:
      - httpApi:
          path: /category
          method: post

  list-categories:
    handler: bootstrap
    package:
      artifact: bin/ListCategories.zip
    events:
      - httpApi:
          path: /category
          method: get

  get-one-category:
    handler: bootstrap
    package:
      artifact: bin/GetOneCategory.zip
    events:
      - httpApi:
          path: /category/{id}
          method: get

  update-category:
    handler: bootstrap
    package:
      artifact: bin/UpdateCategory.zip
    events:
      - httpApi:
          path: /category/{id}
          method: put

  delete-category:
    handler: bootstrap
    package:
      artifact: bin/DeleteCategory.zip
    events:
      - httpApi:
          path: /category/{id}
          method: delete

resources:
  Resources:
    SuppliersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: suppliers
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    FilmsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: films
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    CategoriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: categories
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
