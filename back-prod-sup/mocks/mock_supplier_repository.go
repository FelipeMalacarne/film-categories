// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/felipemalacarne/back-prod-sup/internal/supplier/domain (interfaces: SupplierRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/felipemalacarne/back-prod-sup/internal/supplier/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockSupplierRepository is a mock of SupplierRepository interface.
type MockSupplierRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSupplierRepositoryMockRecorder
}

// MockSupplierRepositoryMockRecorder is the mock recorder for MockSupplierRepository.
type MockSupplierRepositoryMockRecorder struct {
	mock *MockSupplierRepository
}

// NewMockSupplierRepository creates a new mock instance.
func NewMockSupplierRepository(ctrl *gomock.Controller) *MockSupplierRepository {
	mock := &MockSupplierRepository{ctrl: ctrl}
	mock.recorder = &MockSupplierRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupplierRepository) EXPECT() *MockSupplierRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSupplierRepository) Create(arg0 *domain.Supplier) (domain.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSupplierRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSupplierRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockSupplierRepository) Delete(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSupplierRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSupplierRepository)(nil).Delete), arg0)
}

// FindAll mocks base method.
func (m *MockSupplierRepository) FindAll() ([]domain.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]domain.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockSupplierRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockSupplierRepository)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockSupplierRepository) FindByID(arg0 uuid.UUID) (domain.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(domain.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSupplierRepositoryMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSupplierRepository)(nil).FindByID), arg0)
}

// Update mocks base method.
func (m *MockSupplierRepository) Update(arg0 *domain.Supplier) (domain.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(domain.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSupplierRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSupplierRepository)(nil).Update), arg0)
}
